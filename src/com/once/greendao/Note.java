package com.once.greendao;

import java.util.List;
import com.once.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table NOTE.
 */
public class Note {

    private Long id;
    private String title;
    private String notecontent;
    private java.util.Date notecreateDate;
    private java.util.Date noteupdateDate;
    private String notepictrue;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NoteDao myDao;

    private List<Tag> tags;

    public Note() {
    }

    public Note(Long id) {
        this.id = id;
    }

    public Note(Long id, String title, String notecontent, java.util.Date notecreateDate, java.util.Date noteupdateDate, String notepictrue) {
        this.id = id;
        this.title = title;
        this.notecontent = notecontent;
        this.notecreateDate = notecreateDate;
        this.noteupdateDate = noteupdateDate;
        this.notepictrue = notepictrue;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNoteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getNotecontent() {
        return notecontent;
    }

    public void setNotecontent(String notecontent) {
        this.notecontent = notecontent;
    }

    public java.util.Date getNotecreateDate() {
        return notecreateDate;
    }

    public void setNotecreateDate(java.util.Date notecreateDate) {
        this.notecreateDate = notecreateDate;
    }

    public java.util.Date getNoteupdateDate() {
        return noteupdateDate;
    }

    public void setNoteupdateDate(java.util.Date noteupdateDate) {
        this.noteupdateDate = noteupdateDate;
    }

    public String getNotepictrue() {
        return notepictrue;
    }

    public void setNotepictrue(String notepictrue) {
        this.notepictrue = notepictrue;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Tag> getTags() {
        if (tags == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TagDao targetDao = daoSession.getTagDao();
            List<Tag> tagsNew = targetDao._queryNote_Tags(id);
            synchronized (this) {
                if(tags == null) {
                    tags = tagsNew;
                }
            }
        }
        return tags;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTags() {
        tags = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
